<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-02-02T16:23:24-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Luke Sprangers Blog</title><subtitle>Yet Another Weblog</subtitle><author><name>Your Name</name></author><entry><title type="html">Mapreducegraphtraversals</title><link href="http://localhost:4000/MapReduceGraphTraversals/" rel="alternate" type="text/html" title="Mapreducegraphtraversals" /><published>2025-01-30T00:00:00-05:00</published><updated>2025-01-30T00:00:00-05:00</updated><id>http://localhost:4000/MapReduceGraphTraversals</id><content type="html" xml:base="http://localhost:4000/MapReduceGraphTraversals/"><![CDATA[<hr />
<p>Title: How We Implemented Graph Traversal via MapReduce
Date: 2025-01-30
—-</p>

<h1 id="why-does-this-even-matter">Why does this even matter</h1>
<p>A lot of ML and analytics is done on Spark nowadays, and most of the goodness from Spark goes away when people abstract things out like graph traversals, which undermine most analytics use cases around graphs. 
We’ve had a lot of difficulty getting GraphX to scale, and so instead of that we implemented our own way of doing graph traversal via MapReduce.</p>

<h2 id="takeaways">Takeaways</h2>
<p>You absolutely use an enormous amount of space and offset this by having many things ran in parallel while ultimately getting the desired result faster. The same thing could be achieved in a regular Scala file using some thread safety and actors across a Queue, but when you scale up to millions of nodes and billions of edges that dream goes away.</p>]]></content><author><name>Your Name</name></author><summary type="html"><![CDATA[Title: How We Implemented Graph Traversal via MapReduce Date: 2025-01-30 —-]]></summary></entry><entry><title type="html">My Experience Creating A RAFT Cluster From Scratch</title><link href="http://localhost:4000/RAFT/" rel="alternate" type="text/html" title="My Experience Creating A RAFT Cluster From Scratch" /><published>2025-01-29T00:00:00-05:00</published><updated>2025-01-29T00:00:00-05:00</updated><id>http://localhost:4000/RAFT</id><content type="html" xml:base="http://localhost:4000/RAFT/"><![CDATA[<h3 id="setup">Setup</h3>
<p>I took a <a href="https://www.dabeaz.com/raft.html">course</a> recently with some work peers that was focused on recreating the RAFT consensus algorithm from scratch.</p>

<p>The course itself was taught by David Beazley, a professor at the University of Chicago.</p>

<p>The entire idea of the course was to fully recreate RAFT from scratch using nothing but the OS libraries included in a standard bundle:</p>
<ul>
  <li>Sockets</li>
  <li>Threading</li>
  <li>Queueing</li>
</ul>

<p>The main challenge, other than recreating this thing from scratch, was creating a fully functioning test suite along with trying to have some sort of production setting with DNS and networking.</p>

<h3 id="technicals">Technicals</h3>

<h4 id="repo">Repo</h4>
<p>The repo is listed here</p>

<h4 id="picture">Picture</h4>

<h4 id="comparisons">Comparisons</h4>

<h3 id="takeaways">Takeaways</h3>]]></content><author><name>Your Name</name></author><summary type="html"><![CDATA[Setup I took a course recently with some work peers that was focused on recreating the RAFT consensus algorithm from scratch.]]></summary></entry></feed>